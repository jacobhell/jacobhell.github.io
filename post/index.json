[{"ref":"https://jacobhell.github.io/post/gaming-pc-under-250/","title":"How to Build a Gaming PC Under $250","section":"post","date":"2021.02.07","body":"The Dell Optiplex Series This computer is the defacto tower purchased by IT departments. Since there are so many, it is easy to get them used.\nThe tower is also designed to modular. The components are easy to replace, and you can easily fit a GPU into a PCIe port.\nWhere to Find One I used Ebay. Here are the search parameters I recommend:\n  Search \u0026ldquo;Dell Optiplex Tower\u0026rdquo;\n I recommend not getting a small or mini form factor case. It will be harder to find a GPU.    Apply only \u0026ldquo;Buy it Now\u0026rdquo; listings.\n  Sort by lowest price + shipping.\n  Check the boxes for 8GB and 16 GB RAM.\n  Check box for 3.00 - 3.49 GHz CPU speed.\n  I was able to buy a computer for $98 including tax and shipping using the above parameters. I did a search now and found a few options at $100.\nTotal so far: $100\nGPU It\u0026rsquo;s hard to get a GPU right now. Ever since COVID-19 restrictions began demand has been very high. You can still find a good deal on Ebay though.\nHere are some cards to look for that will fit the Optiplex:\n RX 560 GTX 1050 RX 570 R9 280X  Like I said, the prices are inflated a bit, but you should be able to snag one of these for $100. I was able to find an RX 560 for $106 with tax and shipping on Ebay.\nUse a similar process to buying the Optiplex:\n Type in the GPU model Apply \u0026ldquo;Buy it Now\u0026rdquo; listings. Sort by lowest price + shipping.  Total so far: $206.\nPower Supply The final and cheapest part of the build. Don\u0026rsquo;t go used for this one.\nYou can use PC Part Picker to find a good deal on PSUs.\nOn PC Part Picker:\n Go to System Builder. Select Power Supply. Filter the Wattage to 500W max. Sort by lowest price.  I found this one on sale for $43 with tax (had free shipping).\nTotal: $249\nBenchmarks Here are the benchmarks for my PC:\nAccording PC Game Benchmark my build is at the 30th percentile of computer builds. So 70% of computers are more powerful than mine.\nHowevever, you will be able to play ~30% of the top 1000 games played (including Fortnite, Valorant, GTA 5, and Rocket League) with recommended settings.\nYou will also be able to play far more at minimum settings.\nTL;DR  Buy a used Optiplex on Ebay Buy a used GPU on Ebay Buy a PSU off Amazon. "},{"ref":"https://jacobhell.github.io/post/reliability-scalability-maintainability/","title":"What Are Reliability, Scalability, and Maintainability in Distributed Systems?","section":"post","date":"2021.02.05","body":"Reliability Roughly, reliability means \u0026ldquo;working correctly\u0026rdquo; even if something goes wrong. This thing going wrong can be hardware faults, software faults, or human error. A synonym for reliability is fault-tolerant. It is impossible for a system to be completely fault tolerant. One tool you can use to test your system\u0026rsquo;s tolerance is Netflix\u0026rsquo;s Chaos Monkey.\nHardware Faults As we move into a cloud based style of software development, single machine failure is getting less common. However, cloud services sometimes randomly go out. One day, I was unable to use Azure due to the outage in Texas.\nSoftware Faults Due to bugs, software issues can bring down entire systems. These issues can\u0026rsquo;t be stopped completely, but can be mitigated with unit testing, integration testing, and monitoring system behavior in production.\nHuman Error Configuration error by humans is the leading causes of faults in systems. To mitigate this:\n Design systems to minimize opportunity for error. Provide separate instances of the system away from production for testing and exploring. Test using automated processes. Allow for quick and easy recovery from human errors. Setup monitoring for metrics and errors.  Scalability Scalability is how well a system can respond to load. Load is described with load feature terms. For example, Twitter must handle tweets at a rate of 12000 tweets per second.\nIn online systems, we usually care about the response time. Given 12000 tweets per second, how fast can a system respond to a user? If you store data on this, it is best to take the median of the response time.\nTo respond to increased load, you can either scale-up or scale-out. Scaling up means improving system performance by buying better equipment. Scaling out means to distribute the load horizontally.\nThere is no optimal best scaling design. It is dependent on the system.\nMaintainability Refers to ongoing maintenance of a system. There\u0026rsquo;s three design principles of software systems:\n Operability: Make it easy for teams to keep software running smoothly  Provide good monitoring of system internals Provide good support for automation and integration of standard tools Avoid dependency on individual machines Provide good documentation Provide good default behavior, but allow for privileged users to override Allow for self healing Minimize surprises   Simplicity: Make it easy for new engineers to understand the system  Provide good abstraction   Evolvability: Make it easy for new features to be added in future.  TDD and Agile   "},{"ref":"https://jacobhell.github.io/post/pipeline-nlp/","title":"Implementing Pipeline from the SciKit Learn Module","section":"post","date":"2021.01.31","body":"I\u0026rsquo;m continuing learning NLP. In this notebook, I give an example of the Pipeline class for preprocessing and model fitting.\nI\u0026rsquo;m using the fetch_20newsgroups dataset from sklearn.datasets.\nYou can find the code here.\n"},{"ref":"https://jacobhell.github.io/post/setting-up-pihole/","title":"Setting Up my PiHole, a Short Story","section":"post","date":"2021.01.31","body":"I just couldn\u0026rsquo;t take answering surveys on my smart TV anymore.\nSetting Up my Pi Hole, a Short Story On a weekend night, I often find myself diving through the depths of YouTube. Unfortunately, every 5 minutes, I get interrupted by an ad for something I don\u0026rsquo;t want like makeup subscriptions (I long ago disabled personalized tracking).\nOne day, I was perfectly content learning about Kombucha making. All of the sudden, Google absolutely needed me to fill out a survey. I held back a scream of rage and filled out the survey. This surrender truly shook me to my core.\nLater that night, unable to sleep, I realized what I had to do. \u0026ldquo;I need to install Pi Hole!\u0026rdquo; I yelled with new found confidence.\nThe Installation So setting up Pi Hole is supposed to be really easy. It\u0026rsquo;s often one of the first projects people install on their pi. To install it you just run a single bash command:\ncurl -sSL https://install.pi-hole.net | bash\nEasy peasy I thought, I should back to Kombucha videos in no time.\nThe Router, the Pace 5268AC \u0026ldquo;Not so fast\u0026rdquo;, my router/modem combo said. It continued: \u0026ldquo;You can\u0026rsquo;t change DNS settings on me!\u0026rdquo;\n\u0026ldquo;Darn\u0026rdquo; I replied. A smile lit suddenly across my face. \u0026ldquo;Well, good thing I can use Pi Hole as a DHCP server too!\u0026rdquo;\nThe router/modem combo let out a hearty chuckle. \u0026ldquo;Not so fast, you can\u0026rsquo;t change DHCP settings either!\u0026rdquo;\nThe blood rushed to my face.\nThe New Router I bought a new router. I plugged it into the uplink port on my old router/modem combo. I could change the DNS settings. Victory.\nMy Raspbian installation imploded, figuratively. It wouldn\u0026rsquo;t connect to the router via ethernet or wireless. Victory had been lost. To add insult to injury, I did not own an SD card reader, so I could not re install Raspbian.\nFull of sorrow, I walked to Walmart and bought an SD card reader.\nI reinstalled Raspbian. I reinstalled Pi Hole. It could connect to the router. I was blocking ads. My life became complete.\nLessons Learned  Make sure you can change DNS or DHCP settings on your router. If you can\u0026rsquo;t, you need a different one. Or a different firmware like DD-WRT. Have an SD card reader when working with Raspberry Pis. You never know when you need to reinstall the OS. Despite the challenges, a Pi Hole is fun and worthwhile. "},{"ref":"https://jacobhell.github.io/post/lda/","title":"Implementing LDA in Python","section":"post","date":"2021.01.30","body":"Definition Latent Dirichlet Allocation (LDA) is a modelling technique used for NLP.\nI\u0026rsquo;m following along on this kaggle notebook to learn and explain these two techniques.\nCode I have uploaded the jupyter file here.\nAnd that\u0026rsquo;s how you do it. I\u0026rsquo;m not entirely sure how it works yet either, but I am learning!\n"},{"ref":"https://jacobhell.github.io/post/simpsons-paradox/","title":"Introduction to Simpson's Paradox","section":"post","date":"2021.01.26","body":"Introduction and how to avoid it.\nDefinition Simpson\u0026rsquo;s Paradox can be defined like so:\na/b \u0026lt; A/B c/d \u0026lt; C/D, and (a+c) / (b/d) \u0026gt; (A+C) / (B+D) Applying this to an example based loosely on real life:\nSuppose that a University is trying to discriminate in favour of women when hiring staff. It advertises positions in the Department of History and in the Department of Geography, and only those departments. Five men apply for the positions in History and one is hired, and eight women apply and two are hired. The success rate for men is twenty percent, and the success rate for women is twenty-five percent. The History Department has favoured women over men. In the Geography Department eight men apply and six are hired, and five women apply and four are hired. The success rate for men is seventy-five percent and for women it is eighty percent. The Geography Department has favoured women over men. Yet across the University as a whole 13 men and 13 women applied for jobs, and 7 men and 6 women were hired. The success rate for male applicants is greater than the success rate for female applicants. This can be simplified as:\nHistory Major: Men: 1/5\t\u0026lt;\tWomen: 2/8 Geography Major: Men: 6/8\t\u0026lt;\tWomen: 4/5 University Total: Men: 7/13\t\u0026gt;\tWomen: 6/13 Above shows the paradox. How can women be favored in individual majors, but men are favored overall? The answer to this puzzle is that more women are applying for a competitive major, but more men are applying for a major with less competition. In other cases of Simpson\u0026rsquo;s Paradox, different confounding variables are the cause.\nAvoiding Simpson\u0026rsquo;s Paradox Assuming you can\u0026rsquo;t change the study, make sure that the results hold up to the subsets of the data. If there is a large discrepancy with the samples, weight the data accordingly.\nLastly, check for confounding variables, and check their interaction with your results. Here are some suggestions:\nRestriction: restrict the samples b only including certain subjects that have the same values of potential confounding variables.\nMatching: Match the subjects of treatment group with a counterpart in comparison group. The matched subjects must have the same values on the confounding variables.\nStatistical Control: Include potential confounders as variables in regression.\nRandomization: Assign treatment to a study randomly in a large number of subjects.\n"},{"ref":"https://jacobhell.github.io/post/running-spark-applications-docker/","title":"Running Spark Applications on Dockerized Spark","section":"post","date":"2021.01.18","body":"Sparking joy in Docker.\nI\u0026rsquo;m getting into data engineering stuff. The biggest thing in data engineering right now is Spark. Spark lets you perform distributed processes. I consider it to be the Hadoop successor, since it\u0026rsquo;s so much faster.\nRequirements:\n Docker Scala version 2.12.12 (Spark doesn\u0026rsquo;t work with 2.13.* at the time of this writing)  Getting Dockerized Spark Running First, pull the docker image bitnami/spark, using this command:\ndocker pull bitnami/spark It\u0026rsquo;s going to take awhile to download, so I suggest pulling up some Rick and Morty. Two episodes should do the trick.\nThen run it, using this command:\ndocker run -d bitnami/spark -d runs in detached mode, so you retain access to your terminal emulator. Docker prints out the hash, keep this handy.\nPackaging a jar using sbt Go to a Scala program that you want to run in Spark. If you are in need of one, use this:\n/* SimpleApp.scala */ import org.apache.spark.sql.SparkSession object SimpleApp { def main(args: Array[String]) { val logFile = \u0026#34;YOUR_SPARK_HOME/README.md\u0026#34; // Should be some file on your system  val spark = SparkSession.builder.appName(\u0026#34;Simple Application\u0026#34;).getOrCreate() val logData = spark.read.textFile(logFile).cache() val numAs = logData.filter(line =\u0026gt; line.contains(\u0026#34;a\u0026#34;)).count() val numBs = logData.filter(line =\u0026gt; line.contains(\u0026#34;b\u0026#34;)).count() println(s\u0026#34;Lines with a: $numAs, Lines with b: $numBs\u0026#34;) spark.stop() } } I took this snippet from here.\nPackage the program using sbt:\nsbt package Uploading the jar and Running the Spark Application To upload the jar to the docker container, we are going to use the docker cp command. This is where you need the hash.\nRun this command:\ndocker cp \u0026lt;jar_file_on_your_machine\u0026gt;.jar \u0026lt;hash\u0026gt;:/opt/bitnami/spark/app.jar Then, shell into your docker container using the command:\ndocker exec -it \u0026lt;hash\u0026gt; bash Lastly, in your spark docker container, run this command:\nbin/spark-submit --class \u0026quot;SimpleApp\u0026quot; --master local[4] app.jar If you see something similar to Lines with a: 46, Lines with b: 23, then good job, it works! You are ready for more Spark adventures.\n"},{"ref":"https://jacobhell.github.io/post/u-block-distraction/","title":"How to Use uBlock Origin to Limit Distractions","section":"post","date":"2020.05.19","body":"uBlock Origin is usually used to block unwanted ads. But it is also a powerful tool to increase productivity.\nLike most people, I get distracted by shiny things easily. By \u0026ldquo;Shiny Things\u0026rdquo;, I mean interesting headlines, news articles, and videos.\nI\u0026rsquo;m different though, because I know that I need to block the shiny things before my feeble human brain can see them. Luckily, I know of just the tool to help me.\nuBlock Origin The author and maintainer of uBlock Origin, Raymond Hill, is dedicated to privacy. Unlike other ad blocking services, uBlock specifically refuses donations and \u0026ldquo;Approved Ads\u0026rdquo;. So you have no reason to worry that things will get unblocked.\nThe Problem I Had So I have a website that I go on frequently. It is called StackOverflow. It is a question and answer site for programming and computer problems. It is a part of a larger question and answer site called StackExchange.\nUnfortunately for those distracted by shiny things, StackOverflow has a \u0026ldquo;Hot Network Questions\u0026rdquo; section. This section has posts from other parts of StackExchange. The questions posted here are often very interesting, and they are difficult to resist clicking on.\nHere\u0026rsquo;s an example:\nAs far as I know, there is no way to hide this section. Even if you have a StackOverflow account.\nBlocking Distracting Things It\u0026rsquo;s easy to block distracting things using uBlock Origin. Watch the gif below:\n I hope this helped on your quest to reduce distractions.\n"},{"ref":"https://jacobhell.github.io/post/flow/","title":"Flow: How Working from Home Has Made Me Productive","section":"post","date":"2020.05.16","body":"Working from home has been a boon for my productivity.\nI\u0026rsquo;ve wanted to work from home since, well I started working. I\u0026rsquo;m introverted and dislike interruptions. I\u0026rsquo;m not good at small talk. I control the air conditioning. The reasons are endless.\nSince the pandemic started, I\u0026rsquo;ve been working from home. I\u0026rsquo;ve enjoyed the reasons I listed above. However, I didn\u0026rsquo;t expect to be extremely productive.\nI find myself most productive when in a state of flow. In this state, I really only notice myself and the monitor. The keyboard is just an extension of myself. No bug deters me. Unfortunately, I only attain this state for around 30 minutes in the office. This is due to a combination of interruptions and not being in complete control my environment.\nFor example, I can wear whatever clothes I want. If my head or eyes hurt, I can just go lay in bed for 10 minutes. If the lights are too bright, I can dim them. I couldn\u0026rsquo;t do that onsite.\nManaging interruptions while working from home is easier. I only check my email 3 times per day at 8 am, 12 pm, and 4 pm. My phone number is available to members of my team, but I have the choice of answering calls. If called when I\u0026rsquo;m in a state of deep flow, I can text back that I\u0026rsquo;m not available. Then call when it works for me.\nThis might seem mean. But I\u0026rsquo;ve found most urgent emails and calls are not urgent. This is what Cal Newport (one of my favorite authors) thinks about keeping a fixed schedule:\n I’m not available. I often work in hidden nooks of the various libraries on campus. I check and respond to work e-mail only a few times a day. People have to wait for responses from me. It’s often hard to find me. Sometimes they get upset at first. But they don’t really need immediate access. And I will always respond within a reasonable timeframe and get them what they need. So they adjust. And I get things done.\n With complete control over my environment and no interruptions, I have averaged 4 hours of flow per day! It\u0026rsquo;s probably the most productive I\u0026rsquo;ve been in my life.\n"},{"ref":"https://jacobhell.github.io/post/eclipse-vs-intellij/","title":"Eclipse versus IntelliJ","section":"post","date":"2020.05.09","body":"Let\u0026rsquo;s compare these two IDEs.\nGeneral Info Eclipse Eclipse was created by IBM and released in 2001. Eclipse natively supports Java, but has plugins for a ton of other languages. Eclipse is free and has no paid version.\nIntelliJ IntelliJ was released in 2001 by JetBrains. IntelliJ natively supports Java, Groovy, and Kotlin, but has plugins for a ton of other languages. In the paid version of IntelliJ, JavaScript, SQL, Ruby, and a few other languages are supported.\nDebugging Eclipse In Eclipse, to obtain the values of variables in scope requires you to either:\n Mouse over the variables and see the value Add the variable name to the \u0026ldquo;expressions\u0026rdquo; window.  That\u0026rsquo;s too much manual work for this guy.\nIntelliJ In IntelliJ, all variables in Scope are already present in the \u0026ldquo;Variables\u0026rdquo; window. No manual work is required by me!\nRefactoring Eclipse Eclipse has refactoring for renaming files and packages (and updating the name of the references in other files), and extracting code into super classes. It doesn\u0026rsquo;t offer much for refactoring the lines of code itself though.\nIt can also suggest things like unused variables, infinite loops, and unreachable code.\nIntelliJ IntelliJ offers much more options for creating super classes, even going into the member and inline code level.\nIntelliJ offers suggestions for almost any line of code.\nWindows Eclipse The biggest problem I have with Eclipse is something I call \u0026ldquo;Window Fatigue\u0026rdquo;. There are SO many windows in Eclipse, and they always end up in strange places. The concept of \u0026ldquo;Perspectives\u0026rdquo; makes this even more confusing!\nFor example, I will have the console window open while coding. Then when I run the program and start debugging, Eclipse will switch to the \u0026ldquo;debug\u0026rdquo; perspective. This opens and changes the position and size of all windows that are defined by the debug perspective. Once I\u0026rsquo;m done debugging, they all go back to the normal perspective.\nIt might just be me, but I continuously find myself moving stuff around when using Eclipse. And it really wears on me.\nIntelliJ In IntelliJ it\u0026rsquo;s harder to change the window positions. I haven\u0026rsquo;t found myself trying to move stuff around when coding. This is a good thing for me. I can\u0026rsquo;t be trusted with my constant window moving.\nUsability Eclipse For whatever reason, loading and closing a project in Eclipse can cause problems. For example, sometimes after reopening a project, files will no longer be found. Or there will be random errors when trying to start a program, only fixed by removing the project and re importing it.\nI\u0026rsquo;m not sure why this is. I have spent many hours trying to figure out issues with code, only for it to be an Eclipse problem.\nIntelliJ Never had a random problem like this in IntelliJ. However, due to Eclipse being the most used IDE for some time, figuring out a problem is relatively easy. Since there is a good chance that someone else has had the same problem and posted their issue on the internet.\nConclusion I didn\u0026rsquo;t intend for this post to be dropping bombs on Eclipse. IntelliJ is just a lot better in my opinion. The only major drawback is that if you are not doing desktop Java development, you need to buy the paid version to assist with your coding.\n"},{"ref":"https://jacobhell.github.io/post/javafx-eclipse/","title":"How to Get OpenJFX Working in Eclipse","section":"post","date":"2020.04.07","body":"Get the power of JavaFX working in Eclipse. Without the licensing requirements of Oracle JDK.\nRequirements This walkthrough assumes you have Eclipse and a JDK installed.\nDownloading OpenJFX Download the OpenJFX SDK here. The current LTS version, 14, requires at least JDK 11.\nCreate a Java Project  In eclipse, create a Java project File -\u0026gt; New -\u0026gt; Java Project On the src folder, right click and create a package named main. Then create a class named Main. In Main.java replace the contents with:  package main; import javafx.application.Application; import javafx.stage.Stage; public class Main extends Application { @Override public void start(Stage primaryStage) throws Exception{ primaryStage.setTitle(\u0026#34;Hello World\u0026#34;); primaryStage.show(); } public static void main(String[] args) { launch(args); } } Importing the OpenJFX SDK  Right click your java project, and select Properties. Select Java Build Path and then Librares. Select Add Library.... Then Select User Library. Hit Next then Select User Libraries.... Select New... and name it JavaFX. Select JavaFX then select Add External Jars.... A file selection dialog opens. Go to OpenJFXLocation/lib and select all the jar files. Select Apply and Close Check JavaFX and click Finish.  Adding VM Arguments  Select Run -\u0026gt; Run Configurations... Right Click Java Application and select New Configuration. Under Main class search for Main.java. Select the Arguments tab. Paste --module-path \u0026quot;OpenJFXLocation\\lib\u0026quot; --add-modules javafx.controls,javafx.fxml into VM arguments.  Conclusion Select Run and you should be greeted with a window with the title Hello World!\nA lot of work to get this working. But at least no Oracle licensing was involved!\n"},{"ref":"https://jacobhell.github.io/post/hugo-site-netlify/","title":"Create a New Hugo Site on Netlify in 7 Easy Steps","section":"post","date":"2020.03.29","body":"Hugo is a great static site generator. Netlify is an amazing host for static sites. Let\u0026rsquo;s combine the power of them.\nRequirements Make sure that hugo and git are installed, and can be called from your command line.\nHugo Run this command:\nhugo version If installed, the version should print. This is what printed out for me:\nHugo Static Site Generator v0.67.1-4F44227B windows/amd64 BuildDate: 2020-03-15T19:32:32Z Otherwise, here are the install instructions\nGit Run this command:\ngit --version If installed, the version should print. This is what printed out for me:\ngit version 2.21.0.windows.1 Otherwise, here are the install instructions.\nStep 1: Create New Website Open your command line, and run:\nhugo new site \u0026lt;sitename\u0026gt; Replace \u0026lt;sitename\u0026gt; with the name of your site. My blog\u0026rsquo;s name is Software Enlightenment, so I used softwareenlightenment.\nStep 2: Add a Theme to Your Website In the same command line window, run:\ncd \u0026lt;sitename\u0026gt; git init git submodule add https://github.com/matsuyoshi30/harbor.git themes/ananke echo 'theme = \u0026quot;ananke\u0026quot;' \u0026gt;\u0026gt; config.toml Doing this:\n Makes \u0026lt;sitename\u0026gt; a git repo. Adds the ananke theme to you website.  Here are the list of themes, if you don\u0026rsquo;t want to use ananke.\nStep 3: Verify Website Works In the same command line window, run:\nhugo serve Then in a browser, go to localhost:1313. You should see this:\n Step 4: Create netlify.toml In the \u0026lt;sitename\u0026gt; directory (where config.toml is), make a file named netlify.toml.\nCopy and paste this into netlify.toml:\n[build] publish = \u0026#34;public\u0026#34; command = \u0026#34;hugo --gc --minify\u0026#34; [context.production.environment] HUGO_VERSION = \u0026#34;0.68.3\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; [context.split1] command = \u0026#34;hugo --gc --minify --enableGitInfo\u0026#34; [context.split1.environment] HUGO_VERSION = \u0026#34;0.68.3\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; [context.deploy-preview] command = \u0026#34;hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.68.3\u0026#34; [context.branch-deploy] command = \u0026#34;hugo --gc --minify -b $DEPLOY_PRIME_URL\u0026#34; [context.branch-deploy.environment] HUGO_VERSION = \u0026#34;0.68.3\u0026#34; [context.next.environment] HUGO_ENABLEGITINFO = \u0026#34;true\u0026#34; The settings above were taken from here.\nStep 5: Push to GitHub Make a new repository on GitHub.\nYou will be taken to the quick setup page. Copy the https link:\nIn the command line window, run:\ngit remote add origin \u0026lt;https link you copied\u0026gt; git add . git commit -m 'initial commit' git push -u origin master Verify that your code was pushed.\nStep 6: Linking Netlify and GitHub   Open Netlify in your web browser, then go to Sites.\n  Click New site from Git\n  Click GitHub\n  Enter your GitHub credentials\n  Choose the site repository\n  Click the \u0026gt; Icon\n  Validate that Branch to deploy is master.\n build command is hugo --gc --minify publish directory is public    Click Deploy site\n  Step 7: Site Should be Live! Should see this page:\n Once Netlify finishes deploying, should see this:\n Click Preview deploy. You will be taken to your live site!\nConclusion There\u0026rsquo;s not much in life that you can do in 7 steps. You can rest well at night knowing that hosting hugo sites on Netlify is an exception.\nLet me know if you have problems performing these steps.\n"},{"ref":"https://jacobhell.github.io/post/project-lombok/","title":"Java Programming is 90% Easier with Project Lombok","section":"post","date":"2020.03.27","body":"Writing in Java is a pain in the butt. Even simple code is verbose. Project Lombok condenses Java syntax. This reduction can be up to 90% of normal java code.\nLet\u0026rsquo;s see how Lombok does this.\nSetting Up I\u0026rsquo;m using maven. Here are the Project Lombok maven docs.\nI added this dependency:\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.18.12\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; My IDE is Eclipse.\nHere are the Eclipse docs.\nCleaning Up Accessor Methods My IDE has generated thousands of getters and setters for me. However, going through Eclipse\u0026rsquo;s UI to generate them is a struggle. Good thing that Lombok completely removes the need to do this!\nTo generate accessor methods for the whole class:\n@Getter @Setter public class GetterSetterExample { private int age = 10; private String name; } Customizing visibility:\npublic class GetterSetterExample { @Getter @Setter private int age = 10; @Setter(AccessLevel.PROTECTED) private String name; @Override public String toString() { return String.format(\u0026#34;%s (age: %d)\u0026#34;, name, age); } } Null Checking Every time I see NullPointerException with unhelpful information, my blood pressure spikes. We can use the @NonNull attribute to make things easier.\npublic int getStringLength(@NonNull String str) { return str.length(); } If I do this:\ngetStringLength(null); I get this:\nException in thread \u0026quot;main\u0026quot; java.lang.NullPointerException: str is marked non-null but is null toString Another bane of a Java Developer\u0026rsquo;s existence: toString() methods. Like the accessor methods, just an annotation is necessary.\n@ToString(includeFieldNames = true) public class Square { private final int width, height; public Square(int width, int height) { this.width = width; this.height = height; } } Doing this:\nSquare square = new Square(5, 10); System.out.println(square.toString()); Will print out:\nSquare(width=5, height=10) Constructors There can\u0026rsquo;t be more right? Well, there is. Even constructors aren\u0026rsquo;t immune to the power of Lombok.\nCreating a constructor for all variables:\n@AllArgsConstructor public class Square { private int width, height; } No argument constructor:\n@NoArgsConstructor public class Square { private int width, height; } @RequiredArgsConstructor will create a constructor for variables that are final or have @NonNull\n@RequiredArgsConstructor public class Square { private int width, height; } @Data, the Mother of All Annotations Still too much code for you? Well, @Data combines @ToString, @Getter, @Setter, and @RequiredArgsConstructor!\nSo this evil piece of Java code (117 lines):\npublic class DataExample { private final String name; private int age; private double score; private String[] tags; public DataExample(String name) { this.name = name; } public String getName() { return this.name; } void setAge(int age) { this.age = age; } public int getAge() { return this.age; } public void setScore(double score) { this.score = score; } public double getScore() { return this.score; } public String[] getTags() { return this.tags; } public void setTags(String[] tags) { this.tags = tags; } @Override public String toString() { return \u0026#34;DataExample(\u0026#34; + this.getName() + \u0026#34;, \u0026#34; + this.getAge() + \u0026#34;, \u0026#34; + this.getScore() + \u0026#34;, \u0026#34; + Arrays.deepToString(this.getTags()) + \u0026#34;)\u0026#34;; } protected boolean canEqual(Object other) { return other instanceof DataExample; } @Override public boolean equals(Object o) { if (o == this) return true; if (!(o instanceof DataExample)) return false; DataExample other = (DataExample) o; if (!other.canEqual((Object)this)) return false; if (this.getName() == null ? other.getName() != null : !this.getName().equals(other.getName())) return false; if (this.getAge() != other.getAge()) return false; if (Double.compare(this.getScore(), other.getScore()) != 0) return false; if (!Arrays.deepEquals(this.getTags(), other.getTags())) return false; return true; } @Override public int hashCode() { final int PRIME = 59; int result = 1; final long temp1 = Double.doubleToLongBits(this.getScore()); result = (result*PRIME) + (this.getName() == null ? 43 : this.getName().hashCode()); result = (result*PRIME) + this.getAge(); result = (result*PRIME) + (int)(temp1 ^ (temp1 \u0026gt;\u0026gt;\u0026gt; 32)); result = (result*PRIME) + Arrays.deepHashCode(this.getTags()); return result; } public static class Exercise\u0026lt;T\u0026gt; { private final String name; private final T value; private Exercise(String name, T value) { this.name = name; this.value = value; } public static \u0026lt;T\u0026gt; Exercise\u0026lt;T\u0026gt; of(String name, T value) { return new Exercise\u0026lt;T\u0026gt;(name, value); } public String getName() { return this.name; } public T getValue() { return this.value; } @Override public String toString() { return \u0026#34;Exercise(name=\u0026#34; + this.getName() + \u0026#34;, value=\u0026#34; + this.getValue() + \u0026#34;)\u0026#34;; } protected boolean canEqual(Object other) { return other instanceof Exercise; } @Override public boolean equals(Object o) { if (o == this) return true; if (!(o instanceof Exercise)) return false; Exercise\u0026lt;?\u0026gt; other = (Exercise\u0026lt;?\u0026gt;) o; if (!other.canEqual((Object)this)) return false; if (this.getName() == null ? other.getValue() != null : !this.getName().equals(other.getName())) return false; if (this.getValue() == null ? other.getValue() != null : !this.getValue().equals(other.getValue())) return false; return true; } @Override public int hashCode() { final int PRIME = 59; int result = 1; result = (result*PRIME) + (this.getName() == null ? 43 : this.getName().hashCode()); result = (result*PRIME) + (this.getValue() == null ? 43 : this.getValue().hashCode()); return result; } } } Turns into this friendly snippet (13 lines):\n@Data public class DataExample { private final String name; @Setter(AccessLevel.PACKAGE) private int age; private double score; private String[] tags; @ToString(includeFieldNames=true) @Data(staticConstructor=\u0026#34;of\u0026#34;) public static class Exercise\u0026lt;T\u0026gt; { private final String name; private final T value; } } Conclusion Project Lombok is my best find this year. But wait, there\u0026rsquo;s more!\nThe documentation is fantastic and has further features to sink your teeth into.\n"},{"ref":"https://jacobhell.github.io/post/intro-chain-of-responsibility/","title":"The Chain of Responsibility Pattern Makes Hard Validation Easy","section":"post","date":"2020.03.25","body":"I like my validation workflow the same way I like my IKEA tables. Easy to setup and with a cool name. Though the Chain of Responsibility is no Godfjord, it is pretty easy to use.\nIntro Hello professional computer touchers.\nA great intro has already been written for Chain of Responsibility. I highly recommend Refactoring.Guru for their other articles too.\nMy Two Problems I\u0026rsquo;ve got a backend written in Java that takes in a username and password. This backend authenticates users and returns a token.\nI was happy to get it done and it was easy to implement. Unfortunately my happiness was short-lived. Because my site is now under attack by hackers.\nIf that wasn\u0026rsquo;t bad enough, I forgot to pay the bill for the VPS hosting my database. Now they\u0026rsquo;ve downgraded my service.\nThe Solutions Here\u0026rsquo;s what I\u0026rsquo;ve got to do:\n Prevent the usernames of known hackers from logging in. Cache authenticated usernames for less DB reads.  The POJOs The POJO that stores the authentication request:\npublic class UserAuthenticationRequest { private String username; private String password; public UserAuthenticationRequest(String username, String password) { this.username = username; this.password = password; } public String getUsername() { return username; } public String getPassword() { return password; } } The POJO that stores the authentication response:\npublic class UserAuthenticationResult { private String token; private String username; private boolean authenticated; public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getToken() { return token; } public void setToken(String token) { this.token = token; } public boolean isAuthenticated() { return authenticated; } public void setAuthenticated(boolean authenticated) { this.authenticated = authenticated; } @Override public String toString() { return \u0026#34;Username: \u0026#34; + username + \u0026#34;\\nToken: \u0026#34; + token + \u0026#34;\\nIsAuthenticated: \u0026#34; + authenticated; } } Chain of Responsibility Implementation The Chain of Responsibility pattern first needs an abstract Handler class. My other Handlers will extend from this class.\npublic abstract class UserAuthenticationHandler { private UserAuthenticationHandler next; public UserAuthenticationHandler(UserAuthenticationHandler next) { this.next = next; } public UserAuthenticationResult handleUserCredentials(UserAuthenticationRequest request) { return next.handleUserCredentials(request); } } Should do the trick.\nLet\u0026rsquo;s write some code to deal with those pesky hackers. The handler should return a UserAuthenticationResult with authenticate set to false if they are up to no good.\npublic class UsernameBannedHandler extends UserAuthenticationHandler { private List\u0026lt;String\u0026gt; bannedUsernames; public UsernameBannedHandler(UserAuthenticationHandler next) { super(next); bannedUsernames = List.of(\u0026#34;jakehell\u0026#34;, \u0026#34;bannedUser\u0026#34;, \u0026#34;jakehell2\u0026#34;); } @Override public UserAuthenticationResult handleUserCredentials(UserAuthenticationRequest request) { if(isUsernameBanned(request)) { return getAuthenticationFailureResult(request); } return super.handleUserCredentials(request); } private boolean isUsernameBanned(UserAuthenticationRequest request) { return bannedUsernames.contains(request.getUsername()); } private UserAuthenticationResult getAuthenticationFailureResult(UserAuthenticationRequest request) { UserAuthenticationResult result = new UserAuthenticationResult(); result.setUsername(request.getUsername()); result.setAuthenticated(false); return result; } } That takes care of my first problem.\nNow to check if the username is cached. This handler should return the cached username and token.\npublic class UserCachedHandler extends UserAuthenticationHandler { private Map\u0026lt;String, String\u0026gt; usernameToken; public UserCachedHandler(UserAuthenticationHandler next) { super(next); usernameToken = Map.of(\u0026#34;cachedUser\u0026#34;, \u0026#34;cachedUserToken\u0026#34;, \u0026#34;jakehell4\u0026#34;, \u0026#34;token5\u0026#34;); } @Override public UserAuthenticationResult handleUserCredentials(UserAuthenticationRequest request) { String username = request.getUsername(); if(usernameToken.containsKey(username)) { return getSuccessfulUserAuthenticationResult(username); } return super.handleUserCredentials(request); } public UserAuthenticationResult getSuccessfulUserAuthenticationResult(String username) { UserAuthenticationResult result = new UserAuthenticationResult(); result.setUsername(username); result.setToken(usernameToken.get(username)); result.setAuthenticated(true); return result; } } Lastly, I need to actually try to authenticate the user.\npublic class AuthenticateUserHandler extends UserAuthenticationHandler { public AuthenticateUserHandler(UserAuthenticationHandler next) { super(next); } @Override public UserAuthenticationResult handleUserCredentials(UserAuthenticationRequest request) { if(authenticateUser(request)) { return createSuccessfulResult(request); } return super.handleUserCredentials(request); } private boolean authenticateUser(UserAuthenticationRequest request) { if(request.getUsername().equals(\u0026#34;authenticatedUser\u0026#34;) \u0026amp;\u0026amp; request.getPassword().equals(\u0026#34;password\u0026#34;)) { return true; } return false; } private UserAuthenticationResult createSuccessfulResult(UserAuthenticationRequest request) { UserAuthenticationResult result = new UserAuthenticationResult(); result.setAuthenticated(true); result.setUsername(request.getUsername()); result.setToken(generateToken()); return result; } private String generateToken() { return \u0026#34;token\u0026#34;; } } For some reason, only authenticatedUser can login. Oh well, different problem for a different day.\nCreating the Chain Here is the chain:\nUsernameBannedHandler -\u0026gt; UserCachedHandler -\u0026gt; UserAuthenticationHandler\nI also put ForceAuthenticationFailureHandler after UserAuthenticationHandler. Since authentication failed if it got to that handler.\npublic static void main(String[] args) { ForceAuthenticationFailureHandler forceAuthenticationFailureHandler = new ForceAuthenticationFailureHandler(null); AuthenticateUserHandler authenticateUserHandler = new AuthenticateUserHandler(forceAuthenticationFailureHandler); UserCachedHandler userCachedHandler = new UserCachedHandler(authenticateUserHandler); UsernameBannedHandler usernameBannedHandler = new UsernameBannedHandler(userCachedHandler); UserAuthenticationRequest banned = new UserAuthenticationRequest(\u0026#34;bannedUser\u0026#34;, \u0026#34;password\u0026#34;); UserAuthenticationRequest cached = new UserAuthenticationRequest(\u0026#34;cachedUser\u0026#34;, \u0026#34;password\u0026#34;); UserAuthenticationRequest authenticated = new UserAuthenticationRequest(\u0026#34;authenticatedUser\u0026#34;, \u0026#34;password\u0026#34;); UserAuthenticationRequest failure = new UserAuthenticationRequest(\u0026#34;authenticateFailure\u0026#34;, \u0026#34;password\u0026#34;); UserAuthenticationResult bannedResult = usernameBannedHandler.handleUserCredentials(banned); UserAuthenticationResult cachedResult = usernameBannedHandler.handleUserCredentials(cached); UserAuthenticationResult authenticatedResult = usernameBannedHandler.handleUserCredentials(authenticated); UserAuthenticationResult failureResult = usernameBannedHandler.handleUserCredentials(failure); System.out.println(bannedResult.toString()); System.out.println(); System.out.println(cachedResult.toString()); System.out.println(); System.out.println(authenticatedResult.toString()); System.out.println(); System.out.println(failureResult.toString()); } Output:\nUsername: bannedUser Token: null IsAuthenticated: false Username: cachedUser Token: cachedUserToken IsAuthenticated: true Username: authenticatedUser Token: token IsAuthenticated: true Username: authenticateFailure Token: null IsAuthenticated: false Conclusion Here is the source of this code on GitHub.\n"},{"ref":"https://jacobhell.github.io/post/intro-abstract-document-pattern/","title":"Don't Want to Create a Ton of Getters/Setters? Say Hello to the Abstract Document Pattern.","section":"post","date":"2020.03.23","body":"In this post, I talk about the Abstract Document pattern, which allows one to pseudo-dynamically create properties for a model. While keeping the type safety that statically typed languages like Java provide.\nType Safety Type safety is an important concept for programming languages. More dynamically typed languages like JavaScript will try to execute almost anything you try at it. Even if an operation between two values will not work on paper. For example:\nvar foo(){ return \u0026#34;a\u0026#34; + 1; } foo(); // will return \u0026#34;a1\u0026#34; The value of type safety could make developers decide to use statically typed languages.\nDownside of Statically Typed Languages One disadvantage of using Statically-typed languages is the loss of flexibility when trying to add new values to a model or class.\nFor example, let\u0026rsquo;s say I have a class called Car with two properties: Paint and Trim.\npublic class Car { private String paint; private String trim; public String getPaint() { return paint; } public void setPaint(String paint) { this.paint = paint; } public String getTrim() { return trim; } public void setTrim(String trim) { this.trim = trim; } }\tLooks good right? This class would be fine if we just wanted to hold onto paint and trim. But what if we want to add the following fields:\n Window tint Engine type Wheel model Radiator type Has CD Player Has Touch Screen Plus potentially 1000+ more fields, depending on what the customer is wanting.  I don\u0026rsquo;t even want to think how big this class is going to get if we tried to implement all these fields!\nImplementing the Abstract Document To describe the Abstract Document, first we must start with an interface that I call Document.\npublic interface Document { void put(String key, Object value); Object get(String key); } Pretty simple interface. Not really different from the default Map abstract class in Java.\nWe will then create a class called Abstract Document which implements Document.\npublic abstract class AbstractDocument implements Document { protected final Map\u0026lt;String, Object\u0026gt; properties; protected AbstractDocument(Map\u0026lt;String, Object\u0026gt; properties) { this.properties = properties; } @Override public void put(String key, Object value) { properties.put(key, value); } @Override public Object get(String key) { return properties.get(key); } } AbstractDocument is the class that all concrete documents will extend from. Again, this class is pretty simple. Things get exciting when we starting making more classes that extend Document.\nBefore I go further, let me describe what we are trying to accomplish in this scenario. Going back to the Car class I had before, let\u0026rsquo;s implement a workflow that will allow developers to create a Car that has a Model, Price, and list of Parts. These parts can have their own model and price, and also a Type.\nImplementing Our Use Case We first begin by adding interfaces that extend Document. These interfaces should describe a noun that are a property of another noun. Let\u0026rsquo;s start with the model of the car. It is a noun which is a property of the car.\npublic interface HasModel extends Document { String getModel(); } Another property we want to add is Price.\npublic interface HasPrice extends Document { Number getPrice(); } We discussed adding Parts as well. Before adding the interface, remember that each Part will have it\u0026rsquo;s own Model and Price as well. It will also have a Type, something that a Car will not have. Let\u0026rsquo;s go ahead and create the HasType interface.\npublic interface HasType extends Document { String getType(); } Part is going to be our first concrete class. This is where the magic of the Abstract Document is revealed:\npublic class Part extends AbstractDocument implements HasType, HasModel, HasPrice { protected Part(Map\u0026lt;String, Object\u0026gt; properties) { super(properties); } @Override public Number getPrice() { return (Number) properties.get(Property.PRICE.toString()); } @Override public String getModel() { return (String) properties.get(Property.MODEL.toString()); } @Override public String getType() { return (String) properties.get(Property.TYPE.toString()); } } When creating the concrete classes, remember that we must extend AbstractDocument. Every Document that we add as well we must implement. You can implement as many Documents you want.\nLastly, let\u0026rsquo;s create the Car concrete class.\npublic class Car extends AbstractDocument implements HasModel, HasPrice, HasParts { protected Car(Map\u0026lt;String, Object\u0026gt; properties) { super(properties); } @Override public List\u0026lt;Part\u0026gt; getParts() { @SuppressWarnings(\u0026#34;unchecked\u0026#34;) List\u0026lt;Map\u0026lt;String, Object\u0026gt;\u0026gt; parts = (List\u0026lt;Map\u0026lt;String, Object\u0026gt;\u0026gt;) properties.get(Property.PARTS.toString()); return parts.stream().map(Part::new).collect(Collectors.toList()); } @Override public Number getPrice() { return (Number) properties.get(Property.PRICE.toString()); } @Override public String getModel() { return (String) properties.get(Property.MODEL.toString()); } } Bringing it all Together Now that we have got the Abstract Document implemented with concrete classes, let\u0026rsquo;s get a simple client working.\npublic class Main { public static void main(String[] args) { var engine = Map.of( Property.MODEL.toString(), \u0026#34;Model 1\u0026#34;, Property.PRICE.toString(), 200.00, Property.TYPE.toString(), \u0026#34;Engine\u0026#34; ); var muffler = Map.of( Property.TYPE.toString(), \u0026#34;Muffler\u0026#34;, Property.PRICE.toString(), 100.00, Property.MODEL.toString(), \u0026#34;Model 2\u0026#34; ); var carProperties = Map.of( Property.MODEL.toString(), \u0026#34;Fast car\u0026#34;, Property.PRICE.toString(), 50000, Property.PARTS.toString(), List.of(engine, muffler) ); var car = new Car(carProperties); System.out.println(car.getModel()); System.out.println(car.getPrice()); car.getParts().forEach(part -\u0026gt; System.out.println(part.getModel())); } } Output:\nFast car 50000 Model 1 Model 2 Conclusion Thanks for reading!\nI have created a GitHub repo with the source for this post. Please go here to view it.\n"},{"ref":"https://jacobhell.github.io/post/using-abstract-factory-pattern/","title":"Have a lot of if/else Statements Doing Similar Things? Use an Abstract Factory!","section":"post","date":"2020.03.19","body":"When working on a legacy system, one of the more common problems I see is similar actions happening within if/else or control statements.\nTake this code snippet for example:\npublic LedgerEntry getLedgerEntry(TransactionDetails details) { LedgerEntry entry = null; String transactionType = details.getTransactionType(); if(transactionType.equals(\u0026#34;check\u0026#34;)) { entry = new CheckEntry(); entry.setCheckType(\u0026#34;check\u0026#34;); entry.setCheckPurchaser(details.getPurchaser()); entry.setCheckDate(details.getDate()); entry.setRoutingNumber(details.getRoutingNumber()); entry.setAccountNumber(details.getAccountNumber()); } else if(transactionType.equals(\u0026#34;creditcard\u0026#34;)) { entry = new CreditCardLedgerEntry(); entry.setType(\u0026#34;creditcard\u0026#34;); entry.setCreditCardPurchaser(details.getPurchaser()); entry.setCreditCardDate(details.getDate()); entry.setCreditCardNumber(details.getCreditCardNumber()); } else if(transactionType.equals(\u0026#34;cash\u0026#34;)) { entry = new CashEntry(); entry.setType(\u0026#34;cash\u0026#34;); entry.setCashPurchaser(details.getPurchaser()); entry.setCashDate(details.getDate()); } else if(transactionType.equals(\u0026#34;crypto\u0026#34;)) { entry = new CryptoEntry(); entry.setType(\u0026#34;crypto\u0026#34;); entry.setCryptoPurchaser(details.getPurchaser()); entry.setCryptoDate(details.getDate()); entry.setCyrptoPublicKey(details.getPublicKey()); } return entry; } Let\u0026rsquo;s say that this snippet is from a larger accounting program that will save financial records to a database.\nThis method is doing the following:\n Determining what type of transaction occurred based on the transaction type Creating a concrete instance of the LedgerEntry abstract class Returning this entry  This method probably works fine, but what if we needed to do something for both cash and cryptocurrency transactions:\npublic LedgerEntry getLedgerEntry(TransactionDetails details) { // previous code \tif(transactionType.equals(\u0026#34;cash\u0026#34;) || transactionType.equals(\u0026#34;crypto\u0026#34;)) { entry.setAlertFBIAndPresidentOfUSA(true); } return entry; } And what if further we needed to do something special to other transaction types? This could get complicated fast.\nMy go to solution for problems such as this to use the Abstract Factory Pattern. This is one of the patterns found in the famous book: Design Patterns: Elements of Reusable Object-Oriented Software.\nThe Abstract Factory Pattern relies on the client creating a Factory and then calling the abstract method create.\nThe nice thing about this is the client doesn\u0026rsquo;t have to know about the inner workings of each create method.\nLet\u0026rsquo;s see what this method looks like after using the Abstract Factory Pattern:\npublic LedgerEntry getLedgerEntry(TransactionDetails details) { AbstractLedgerFactory ledgerFactory = null; String transactionType = details.getTransactionType(); if(transactionType.equals(\u0026#34;check\u0026#34;)) { ledgerFactory = new CheckLedgerFactory(); } else if(transactionType.equals(\u0026#34;creditcard\u0026#34;)) { ledgerFactory = new CreditCardLedgerFactory(); } else if(transactionType.equals(\u0026#34;cash\u0026#34;)) { ledgerFactory = new CashLedgerFactory(); } else if(transactionType.equals(\u0026#34;crypto\u0026#34;)) { ledgerFactory = new CryptoLedgerFactory(); } return ledgerFactory.create(details); } Much easier to read! And if more logic needs to happen for transaction types, it can be done in the concrete factory method.\nHere is the AbstractLedgerFactory and CryptoLedgerFactory:\npublic abstract class AbstractLedgerFactory { public abstract LedgerEntry create(TransactionDetails details); } public class CryptoLedgerFactory extends AbstractLedgerFactory { @Override public LedgerEntry create(TransactionDetails details) { LedgerEntry entry = new CryptoEntry(); entry.setType(\u0026#34;crypto\u0026#34;); entry.setCryptoPurchaser(details.getPurchaser()); entry.setCryptoDate(details.getDate()); entry.setCyrptoPublicKey(details.getPublicKey()); entry.setAlertFBIAndPresidentOfUSA(true); return entry; } } "},{"ref":"https://jacobhell.github.io/post/programming-on-the-cheap/","title":"Programming on the Cheap. How to Program on a $20 Device.","section":"post","date":"2020.03.13","body":"Like most people, I like to do things as cheaply as possible.\nThis thought extends to programming for me. Lucky for us who are software developers, a lot of the tools we get to use are free.\nThis includes programming languages with their compilers, IDEs and editors, and even operating systems. We can thank the pioneers of the free software movement and GNU project for this.\n However, one thing we can\u0026rsquo;t get for free is the computer that we write, compile, and run our programs on. Not only are computers not free, they can be very expensive! In fact, on TechRadar, the \u0026ldquo;affordable\u0026rdquo; option is the Asus Chromebook Flip. This machine retails for $579! If I was non developer looking to get into programming, I would be out almost $600 before a single stroke of the keyboard.\nKnowing this, I decided to pop into my local thrift store and see if there was a remedy for this insanity. That\u0026rsquo;s when I found this beauty:\n A gently used Dell Inspiron E1405 was in the technology section screaming my name. I looked at the price tag, only $20! What a steal! I quickly took out an Andrew Jackson and made off like a bandit.\nI got home, turned it on, and realized it had Windows XP on it:\n I have no desire to program on a computer with an operating system that hasn\u0026rsquo;t been updated in over a decade. That\u0026rsquo;s where Linux comes in.\nNow this was an old laptop, so I wanted to use a lightweight operating system on it. I ultimately chose Lubuntu, because it has LxQt, one of the lightest desktop graphical systems around. And I generally spend my time in the terminal emulator and vim, so I didnt\u0026rsquo;t need too many out of the box features.\nLubuntu has a pretty straightforward installation process. I had no problems going through the steps in the guide. I did mistakenly try using the 64 bit version instead of the 32 bit version, which is what the cpu required.\nI could have avoided this though, if I looked it up beforehand: How to check\nWith the stress and anxiety of $600 laptops behind me, I was able to fire up my new to me Lubuntu powered laptop, and write this blog post with great amounts of joy and happiness.\n"}]