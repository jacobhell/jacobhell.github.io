<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design on Jacob Hell</title><link>/tags/design/</link><description>Recent content in design on Jacob Hell</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 25 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/design/index.xml" rel="self" type="application/rss+xml"/><item><title>The Chain of Responsibility Pattern Makes Hard Validation Easy</title><link>/post/intro-chain-of-responsibility/</link><pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate><guid>/post/intro-chain-of-responsibility/</guid><description>&lt;p>I like my validation workflow the same way I like my IKEA tables. Easy to setup and with a cool name. Though the Chain of Responsibility is no &lt;a href="https://www.ikea.com/us/en/p/godfjord-bed-frame-gray-s99256172/">Godfjord&lt;/a>, it is pretty easy to use.&lt;/p></description></item><item><title>Don't Want to Create a Ton of Getters/Setters? Say Hello to the Abstract Document Pattern.</title><link>/post/intro-abstract-document-pattern/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><guid>/post/intro-abstract-document-pattern/</guid><description>&lt;p>In this post, I talk about the Abstract Document pattern, which allows one to pseudo-dynamically create properties for a model. While keeping the type safety that statically typed languages like Java provide.&lt;/p></description></item></channel></rss>