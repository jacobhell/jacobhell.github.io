<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on Jacob Hell's Blog</title><link>https://jacobhell.github.io/tags/java/</link><description>Recent content in java on Jacob Hell's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 08 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jacobhell.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>What's New in Java 16</title><link>https://jacobhell.github.io/post/java-16/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><guid>https://jacobhell.github.io/post/java-16/</guid><description>&lt;h2 id="vector-api-incubator">Vector API (Incubator)&lt;/h2>
&lt;p>The Vector API has been added to the &lt;a href="https://openjdk.java.net/jeps/11">incubator module&lt;/a>.&lt;/p>
&lt;p>The Vector API adds vector computations that reliably compile at runtime to optimal vector hardware instructions.&lt;/p>
&lt;p>Here is an example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> VectorSpecies&lt;span style="color:#f92672">&amp;lt;&lt;/span>Float&lt;span style="color:#f92672">&amp;gt;&lt;/span> SPECIES &lt;span style="color:#f92672">=&lt;/span> FloatVector&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">SPECIES_256&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">vectorComputation&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">float&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> a&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> b&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> c&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> upperBound &lt;span style="color:#f92672">=&lt;/span> SPECIES&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">loopBound&lt;/span>&lt;span style="color:#f92672">(&lt;/span>a&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> upperBound&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">+=&lt;/span> SPECIES&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// FloatVector va, vb, vc;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> var va &lt;span style="color:#f92672">=&lt;/span> FloatVector&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">fromArray&lt;/span>&lt;span style="color:#f92672">(&lt;/span>SPECIES&lt;span style="color:#f92672">,&lt;/span> a&lt;span style="color:#f92672">,&lt;/span> i&lt;span style="color:#f92672">);&lt;/span>
var vb &lt;span style="color:#f92672">=&lt;/span> FloatVector&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">fromArray&lt;/span>&lt;span style="color:#f92672">(&lt;/span>SPECIES&lt;span style="color:#f92672">,&lt;/span> b&lt;span style="color:#f92672">,&lt;/span> i&lt;span style="color:#f92672">);&lt;/span>
var vc &lt;span style="color:#f92672">=&lt;/span> va&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">mul&lt;/span>&lt;span style="color:#f92672">(&lt;/span>va&lt;span style="color:#f92672">).&lt;/span>
add&lt;span style="color:#f92672">(&lt;/span>vb&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">mul&lt;/span>&lt;span style="color:#f92672">(&lt;/span>vb&lt;span style="color:#f92672">)).&lt;/span>
neg&lt;span style="color:#f92672">();&lt;/span>
vc&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">intoArray&lt;/span>&lt;span style="color:#f92672">(&lt;/span>c&lt;span style="color:#f92672">,&lt;/span> i&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> a&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">;&lt;/span> i&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
c&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>a&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">*&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">+&lt;/span> b&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">*&lt;/span> b&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">-&lt;/span>1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">0f&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Based on my research, this won&amp;rsquo;t be useful for most developers right away. It fits a niche used for low level processing and matrix multiplication.&lt;/p>
&lt;h2 id="enable-c14-language-features">Enable C++14 Language Features&lt;/h2>
&lt;p>Allows the use of C++14 language features in JDK C++ source code. This won&amp;rsquo;t be relevant to someone using Java to write code. But we might see performance improvements.&lt;/p>
&lt;h2 id="migrate-from-mercurial-to-git-and-migrate-to-github">Migrate from Mercurial to Git and Migrate to GitHub&lt;/h2>
&lt;p>Move the JDK repository to GitHub. I think this is a good change. Git is definitely the most widely used source control software. And GitHub is the easiest to use git hosting software.&lt;/p>
&lt;h2 id="zgc-concurrent-thread-stack-processing">ZGC: Concurrent Thread-Stack Processing&lt;/h2>
&lt;p>Move ZGC thread-stack processing from safepoints to a concurrent phase. This improves scalability and performance of the garbage collector. Not something a developer would notice immediately.&lt;/p>
&lt;h2 id="unix-domain-socket-channels">Unix-Domain Socket Channels&lt;/h2>
&lt;p>Add Unix-domain (&lt;code>AF_UNIX&lt;/code>) socket support to the &lt;a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/nio/channels/SocketChannel.html">socket channel&lt;/a> and &lt;a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/nio/channels/ServerSocketChannel.html">server-socket channel&lt;/a> APIs. A &lt;a href="https://en.wikipedia.org/wiki/Unix_domain_socket">Unix domain socket&lt;/a> is a data &lt;a href="https://en.wikipedia.org/wiki/Communication_endpoint">communications endpoint&lt;/a> for exchanging data between processes executing on the same host operating system.&lt;/p>
&lt;p>Databases like Postgres and MySQL have Unix domain socket communication options. I&amp;rsquo;ve never used them, but I&amp;rsquo;m sure it will be useful for developers who regularly work with them.&lt;/p>
&lt;h2 id="alpine-linux-port">Alpine Linux Port&lt;/h2>
&lt;p>Port the JDK to Alpine Linux, and to other Linux distributions that use musl as their primary C library.&lt;/p>
&lt;p>This will be helpful for getting services like Tomcat, Jetty, and Spring to work on Alpine linux based Docker images.&lt;/p>
&lt;h2 id="elastic-metaspace">Elastic Metaspace&lt;/h2>
&lt;p>Return unused HotSpot class-metadata (i.e., &lt;em>metaspace&lt;/em>) memory to the operating system more promptly. Not something a developer would notice immediately.&lt;/p>
&lt;h2 id="windowsaarch64-port">Windows/AArch64 Port&lt;/h2>
&lt;p>Port the JDK to Windows/AArch64.&lt;/p>
&lt;h2 id="foreign-linker-api-incubator">Foreign Linker API (Incubator)&lt;/h2>
&lt;p>Introduce an API that offers statically-typed, pure-Java access to native code.&lt;/p>
&lt;p>Native code is code written in other languages like C, C++, and assembly. The Java Native Interface (JNI) is the framework that allows this currently. The Foreign Linker API and Project Panama seek to offer an alternative to the cumbersome JNI options.&lt;/p>
&lt;h2 id="warnings-for-value-based-classes">Warnings for Value-Based Classes&lt;/h2>
&lt;p>Designate the primitive wrapper classes as &lt;em>value-based&lt;/em> and deprecate their constructors for removal.&lt;/p>
&lt;p>A value based class has the following properties:&lt;/p>
&lt;ul>
&lt;li>are final and immutable (though may contain references to mutable objects);&lt;/li>
&lt;li>have implementations of &lt;code>equals&lt;/code>, &lt;code>hashCode&lt;/code>, and &lt;code>toString&lt;/code> which are computed solely from the instance&amp;rsquo;s state and not from its identity or the state of any other object or variable;&lt;/li>
&lt;li>make no use of identity-sensitive operations such as reference equality (&lt;code>==&lt;/code>) between instances, identity hash code of instances, or synchronization on an instances&amp;rsquo;s intrinsic lock;&lt;/li>
&lt;li>are considered equal solely based on &lt;code>equals()&lt;/code>, not based on reference equality (&lt;code>==&lt;/code>);&lt;/li>
&lt;li>do not have accessible constructors, but are instead instantiated through factory methods which make no committment as to the identity of returned instances;&lt;/li>
&lt;li>are &lt;em>freely substitutable&lt;/em> when equal, meaning that interchanging any two instances &lt;code>x&lt;/code> and &lt;code>y&lt;/code> that are equal according to &lt;code>equals()&lt;/code> in any computation or method invocation should produce no visible change in behavior.&lt;/li>
&lt;/ul>
&lt;p>Two examples of Value based classes are Optional and LocalDateTime.&lt;/p>
&lt;p>This update isn&amp;rsquo;t very exciting, but it shows progress toward increasing adoption of Value Based classes.&lt;/p>
&lt;h2 id="packaging-tool">Packaging Tool&lt;/h2>
&lt;p>Provide the &lt;code>jpackage&lt;/code> tool, for packaging self-contained Java applications. &lt;code>jpackage&lt;/code> makes it easy to install and uninstall java applications. You can create installers for the desired machine (exe, dmg, and deb for example).&lt;/p>
&lt;p>For destination machines, you don&amp;rsquo;t even have to install the JRE.&lt;/p>
&lt;h2 id="foreign-memory-access-api-third-incubator">Foreign-Memory Access API (Third Incubator)&lt;/h2>
&lt;p>Introduce an API to allow Java programs to safely and efficiently access foreign memory outside of the Java heap. This looks helpful for JVM developers.&lt;/p>
&lt;h2 id="pattern-matching-for-instanceof">Pattern Matching for instanceof&lt;/h2>
&lt;p>Enhance the Java programming language with &lt;em>pattern matching&lt;/em> for the &lt;code>instanceof&lt;/code> operator.&lt;/p>
&lt;p>This change is very useful when using &lt;code>instanceof&lt;/code>.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>obj &lt;span style="color:#66d9ef">instanceof&lt;/span> String s &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> s&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">contains&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// s contains foo!
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="records">Records&lt;/h2>
&lt;p>Enhance the Java programming language with &lt;a href="https://cr.openjdk.java.net/~briangoetz/amber/datum.html">records&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;m excited for this update. Records make Java less verbose. Something that Project Lombok tries to solve as well.&lt;/p>
&lt;p>For example, you can type:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">record &lt;span style="color:#a6e22e">Point&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> x&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> y&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which would create a class called &lt;code>Point&lt;/code> with a constructor with &lt;code>int x, int y&lt;/code>. You would also have accessor methods generated. Records are &lt;code>final&lt;/code> so you can&amp;rsquo;t edit them once created.&lt;/p>
&lt;h2 id="strongly-encapsulate-jdk-internals-by-default">Strongly Encapsulate JDK Internals by Default&lt;/h2>
&lt;p>Strongly encapsulate all internal elements of the JDK by default. This update is to improve security and maintainability of the JDK.&lt;/p>
&lt;h2 id="sealed-classes-second-preview">Sealed Classes (Second Preview)&lt;/h2>
&lt;p>A &lt;code>sealed&lt;/code> class only allows extension or implementation by other classes that it allows.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">abstract&lt;/span> sealed &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Shape&lt;/span>
permits Circle&lt;span style="color:#f92672">,&lt;/span> Rectangle&lt;span style="color:#f92672">,&lt;/span> Square
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Can only be extended by the classes Circle, Rectangle, and Square.&lt;/p>
&lt;p>I&amp;rsquo;m not sure what I would use this for, but it&amp;rsquo;s good to know it exists.&lt;/p></description></item><item><title>Eclipse versus IntelliJ</title><link>https://jacobhell.github.io/post/eclipse-vs-intellij/</link><pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate><guid>https://jacobhell.github.io/post/eclipse-vs-intellij/</guid><description>&lt;p>Let&amp;rsquo;s compare these two IDEs.&lt;/p>
&lt;h1 id="general-info">General Info&lt;/h1>
&lt;h3 id="eclipse">Eclipse&lt;/h3>
&lt;p>Eclipse was created by IBM and released in 2001. Eclipse natively supports Java, but has plugins for a ton of other languages. Eclipse is free and has no paid version.&lt;/p>
&lt;h3 id="intellij">IntelliJ&lt;/h3>
&lt;p>IntelliJ was released in 2001 by JetBrains. IntelliJ natively supports Java, Groovy, and Kotlin, but has plugins for a ton of other languages. In the paid version of IntelliJ, JavaScript, SQL, Ruby, and a few other languages are supported.&lt;/p>
&lt;h1 id="debugging">Debugging&lt;/h1>
&lt;h3 id="eclipse-1">Eclipse&lt;/h3>
&lt;p>In Eclipse, to obtain the values of variables in scope requires you to either:&lt;/p>
&lt;ul>
&lt;li>Mouse over the variables and see the value&lt;/li>
&lt;li>Add the variable name to the &amp;ldquo;expressions&amp;rdquo; window.&lt;/li>
&lt;/ul>
&lt;p>That&amp;rsquo;s too much manual work for this guy.&lt;/p>
&lt;h3 id="intellij-1">IntelliJ&lt;/h3>
&lt;p>In IntelliJ, all variables in Scope are already present in the &amp;ldquo;Variables&amp;rdquo; window. No manual work is required by me!&lt;/p>
&lt;h1 id="refactoring">Refactoring&lt;/h1>
&lt;h3 id="eclipse-2">Eclipse&lt;/h3>
&lt;p>Eclipse has refactoring for renaming files and packages (and updating the name of the references in other files), and extracting code into super classes. It doesn&amp;rsquo;t offer much for refactoring the lines of code itself though.&lt;/p>
&lt;p>It can also suggest things like unused variables, infinite loops, and unreachable code.&lt;/p>
&lt;h3 id="intellij-2">IntelliJ&lt;/h3>
&lt;p>IntelliJ offers much more options for creating super classes, even going into the member and inline code level.&lt;/p>
&lt;p>IntelliJ offers suggestions for almost any line of code.&lt;/p>
&lt;h1 id="windows">Windows&lt;/h1>
&lt;h3 id="eclipse-3">Eclipse&lt;/h3>
&lt;p>The biggest problem I have with Eclipse is something I call &amp;ldquo;Window Fatigue&amp;rdquo;. There are SO many windows in Eclipse, and they always end up in strange places. The concept of &amp;ldquo;Perspectives&amp;rdquo; makes this even more confusing!&lt;/p>
&lt;p>For example, I will have the console window open while coding. Then when I run the program and start debugging, Eclipse will switch to the &amp;ldquo;debug&amp;rdquo; perspective. This opens and changes the position and size of all windows that are defined by the debug perspective. Once I&amp;rsquo;m done debugging, they all go back to the normal perspective.&lt;/p>
&lt;p>It might just be me, but I continuously find myself moving stuff around when using Eclipse. And it really wears on me.&lt;/p>
&lt;h3 id="intellij-3">IntelliJ&lt;/h3>
&lt;p>In IntelliJ it&amp;rsquo;s harder to change the window positions. I haven&amp;rsquo;t found myself trying to move stuff around when coding. This is a good thing for me. I can&amp;rsquo;t be trusted with my constant window moving.&lt;/p>
&lt;h1 id="usability">Usability&lt;/h1>
&lt;h3 id="eclipse-4">Eclipse&lt;/h3>
&lt;p>For whatever reason, loading and closing a project in Eclipse can cause problems. For example, sometimes after reopening a project, files will no longer be found. Or there will be random errors when trying to start a program, only fixed by removing the project and re importing it.&lt;/p>
&lt;p>I&amp;rsquo;m not sure why this is. I have spent many hours trying to figure out issues with code, only for it to be an Eclipse problem.&lt;/p>
&lt;h3 id="intellij-4">IntelliJ&lt;/h3>
&lt;p>Never had a random problem like this in IntelliJ. However, due to Eclipse being the most used IDE for some time, figuring out a problem is relatively easy. Since there is a good chance that someone else has had the same problem and posted their issue on the internet.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>I didn&amp;rsquo;t intend for this post to be dropping bombs on Eclipse. IntelliJ is just a lot better in my opinion. The only major drawback is that if you are not doing desktop Java development, you need to buy the paid version to assist with your coding.&lt;/p></description></item><item><title>How to Get OpenJFX Working in Eclipse</title><link>https://jacobhell.github.io/post/javafx-eclipse/</link><pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate><guid>https://jacobhell.github.io/post/javafx-eclipse/</guid><description>&lt;p>Get the power of JavaFX working in Eclipse. Without the licensing requirements of Oracle JDK.&lt;/p>
&lt;h2 id="requirements">Requirements&lt;/h2>
&lt;p>This walkthrough assumes you have Eclipse and a JDK installed.&lt;/p>
&lt;h2 id="downloading-openjfx">Downloading OpenJFX&lt;/h2>
&lt;p>Download the OpenJFX SDK &lt;a href="https://gluonhq.com/products/javafx/">here&lt;/a>. The current LTS version, 14, requires at least JDK 11.&lt;/p>
&lt;h2 id="create-a-java-project">Create a Java Project&lt;/h2>
&lt;ol>
&lt;li>In eclipse, create a Java project &lt;code>File -&amp;gt; New -&amp;gt; Java Project&lt;/code>&lt;/li>
&lt;li>On the &lt;code>src&lt;/code> folder, right click and create a package named &lt;code>main&lt;/code>. Then create a class named &lt;code>Main&lt;/code>.&lt;/li>
&lt;li>In &lt;code>Main.java&lt;/code> replace the contents with:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">package&lt;/span> main&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> javafx.application.Application&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> javafx.stage.Stage&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Main&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> Application &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Stage primaryStage&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> Exception&lt;span style="color:#f92672">{&lt;/span>
primaryStage&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setTitle&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
primaryStage&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">show&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
launch&lt;span style="color:#f92672">(&lt;/span>args&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="importing-the-openjfx-sdk">Importing the OpenJFX SDK&lt;/h2>
&lt;ol>
&lt;li>Right click your java project, and select &lt;code>Properties&lt;/code>.&lt;/li>
&lt;li>Select &lt;code>Java Build Path&lt;/code> and then &lt;code>Librares&lt;/code>.&lt;/li>
&lt;li>Select &lt;code>Add Library...&lt;/code>. Then Select &lt;code>User Library&lt;/code>.&lt;/li>
&lt;li>Hit &lt;code>Next&lt;/code> then Select &lt;code>User Libraries...&lt;/code>.&lt;/li>
&lt;li>Select &lt;code>New...&lt;/code> and name it &lt;code>JavaFX&lt;/code>.&lt;/li>
&lt;li>Select &lt;code>JavaFX&lt;/code> then select &lt;code>Add External Jars...&lt;/code>.&lt;/li>
&lt;li>A file selection dialog opens. Go to &lt;code>OpenJFXLocation/lib&lt;/code> and select all the jar files.&lt;/li>
&lt;li>Select &lt;code>Apply and Close&lt;/code>&lt;/li>
&lt;li>Check &lt;code>JavaFX&lt;/code> and click &lt;code>Finish&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h2 id="adding-vm-arguments">Adding VM Arguments&lt;/h2>
&lt;ol>
&lt;li>Select &lt;code>Run -&amp;gt; Run Configurations...&lt;/code>&lt;/li>
&lt;li>Right Click &lt;code>Java Application&lt;/code> and select &lt;code>New Configuration&lt;/code>.&lt;/li>
&lt;li>Under &lt;code>Main class&lt;/code> search for &lt;code>Main.java&lt;/code>.&lt;/li>
&lt;li>Select the &lt;code>Arguments&lt;/code> tab.&lt;/li>
&lt;li>Paste &lt;code>--module-path &amp;quot;OpenJFXLocation\lib&amp;quot; --add-modules javafx.controls,javafx.fxml&lt;/code> into &lt;code>VM arguments&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h3 id="conclusion">Conclusion&lt;/h3>
&lt;p>Select &lt;code>Run&lt;/code> and you should be greeted with a window with the title &lt;code>Hello World&lt;/code>!&lt;/p>
&lt;p>A lot of work to get this working. But at least no Oracle licensing was involved!&lt;/p></description></item><item><title>Java Programming is 90% Easier with Project Lombok</title><link>https://jacobhell.github.io/post/project-lombok/</link><pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate><guid>https://jacobhell.github.io/post/project-lombok/</guid><description>&lt;p>Writing in Java is a pain in the butt. Even simple code is verbose. Project Lombok condenses Java syntax. This reduction can be up to 90% of normal java code.&lt;/p>
&lt;p>Let&amp;rsquo;s see how Lombok does this.&lt;/p>
&lt;h2 id="setting-up">Setting Up&lt;/h2>
&lt;p>I&amp;rsquo;m using maven. &lt;a href="https://projectlombok.org/setup/maven">Here&lt;/a> are the Project Lombok maven docs.&lt;/p>
&lt;p>I added this dependency:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.projectlombok&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>lombok&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;version&amp;gt;&lt;/span>1.18.12&lt;span style="color:#f92672">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;scope&amp;gt;&lt;/span>provided&lt;span style="color:#f92672">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>My IDE is Eclipse.&lt;/p>
&lt;p>&lt;a href="https://projectlombok.org/setup/eclipse">Here&lt;/a> are the Eclipse docs.&lt;/p>
&lt;h2 id="cleaning-up-accessor-methods">Cleaning Up Accessor Methods&lt;/h2>
&lt;p>My IDE has generated thousands of getters and setters for me. However, going through Eclipse&amp;rsquo;s UI to generate them is a struggle. Good thing that Lombok completely removes the need to do this!&lt;/p>
&lt;p>To generate accessor methods for the whole class:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@Getter&lt;/span>
&lt;span style="color:#a6e22e">@Setter&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GetterSetterExample&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> age &lt;span style="color:#f92672">=&lt;/span> 10&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Customizing visibility:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GetterSetterExample&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#a6e22e">@Getter&lt;/span> &lt;span style="color:#a6e22e">@Setter&lt;/span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> age &lt;span style="color:#f92672">=&lt;/span> 10&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@Setter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>AccessLevel&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">PROTECTED&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">private&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">toString&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">format&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;%s (age: %d)&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> name&lt;span style="color:#f92672">,&lt;/span> age&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="null-checking">Null Checking&lt;/h2>
&lt;p>Every time I see &lt;code>NullPointerException&lt;/code> with unhelpful information, my blood pressure spikes. We can use the &lt;code>@NonNull&lt;/code> attribute to make things easier.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">getStringLength&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@NonNull&lt;/span> String str&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> str&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If I do this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">getStringLength&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I get this:&lt;/p>
&lt;pre>&lt;code>Exception in thread &amp;quot;main&amp;quot; java.lang.NullPointerException: str is marked non-null but is null
&lt;/code>&lt;/pre>&lt;h2 id="tostring">toString&lt;/h2>
&lt;p>Another bane of a Java Developer&amp;rsquo;s existence: toString() methods. Like the accessor methods, just an annotation is necessary.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@ToString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>includeFieldNames &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> width&lt;span style="color:#f92672">,&lt;/span> height&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> width&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> height&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">width&lt;/span> &lt;span style="color:#f92672">=&lt;/span> width&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">height&lt;/span> &lt;span style="color:#f92672">=&lt;/span> height&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Doing this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">Square square &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Square&lt;span style="color:#f92672">(&lt;/span>5&lt;span style="color:#f92672">,&lt;/span> 10&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>square&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toString&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Will print out:&lt;/p>
&lt;pre>&lt;code>Square(width=5, height=10)
&lt;/code>&lt;/pre>&lt;h2 id="constructors">Constructors&lt;/h2>
&lt;p>There can&amp;rsquo;t be more right? Well, there is. Even constructors aren&amp;rsquo;t immune to the power of Lombok.&lt;/p>
&lt;p>Creating a constructor for all variables:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@AllArgsConstructor&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> width&lt;span style="color:#f92672">,&lt;/span> height&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>No argument constructor:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@NoArgsConstructor&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> width&lt;span style="color:#f92672">,&lt;/span> height&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>@RequiredArgsConstructor&lt;/code> will create a constructor for variables that are &lt;code>final&lt;/code> or have &lt;code>@NonNull&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@RequiredArgsConstructor&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> width&lt;span style="color:#f92672">,&lt;/span> height&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="data-the-mother-of-all-annotations">@Data, the Mother of All Annotations&lt;/h2>
&lt;p>Still too much code for you? Well, &lt;code>@Data&lt;/code> combines &lt;code>@ToString&lt;/code>, &lt;code>@Getter&lt;/code>, &lt;code>@Setter&lt;/code>, and &lt;code>@RequiredArgsConstructor&lt;/code>!&lt;/p>
&lt;p>So this evil piece of Java code (117 lines):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DataExample&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> age&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> score&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> String&lt;span style="color:#f92672">[]&lt;/span> tags&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">DataExample&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String name&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setAge&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> age&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> age&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">getAge&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setScore&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">double&lt;/span> score&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">score&lt;/span> &lt;span style="color:#f92672">=&lt;/span> score&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">getScore&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">score&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String&lt;span style="color:#f92672">[]&lt;/span> &lt;span style="color:#a6e22e">getTags&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">tags&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setTags&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> tags&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">tags&lt;/span> &lt;span style="color:#f92672">=&lt;/span> tags&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">toString&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;DataExample(&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getAge&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getScore&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> Arrays&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">deepToString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTags&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">canEqual&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object other&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> other &lt;span style="color:#66d9ef">instanceof&lt;/span> DataExample&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>o &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(!(&lt;/span>o &lt;span style="color:#66d9ef">instanceof&lt;/span> DataExample&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
DataExample other &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>DataExample&lt;span style="color:#f92672">)&lt;/span> o&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>other&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">canEqual&lt;/span>&lt;span style="color:#f92672">((&lt;/span>Object&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> other&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>other&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()))&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getAge&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> other&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getAge&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Double&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">compare&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getScore&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> other&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getScore&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> 0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>Arrays&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">deepEquals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTags&lt;/span>&lt;span style="color:#f92672">(),&lt;/span> other&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTags&lt;/span>&lt;span style="color:#f92672">()))&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">hashCode&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> PRIME &lt;span style="color:#f92672">=&lt;/span> 59&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> 1&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> temp1 &lt;span style="color:#f92672">=&lt;/span> Double&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">doubleToLongBits&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getScore&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>result&lt;span style="color:#f92672">*&lt;/span>PRIME&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> 43 &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">hashCode&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>result&lt;span style="color:#f92672">*&lt;/span>PRIME&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getAge&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>result&lt;span style="color:#f92672">*&lt;/span>PRIME&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">)(&lt;/span>temp1 &lt;span style="color:#f92672">^&lt;/span> &lt;span style="color:#f92672">(&lt;/span>temp1 &lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> 32&lt;span style="color:#f92672">));&lt;/span>
result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>result&lt;span style="color:#f92672">*&lt;/span>PRIME&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> Arrays&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">deepHashCode&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTags&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> result&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Exercise&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> T value&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">Exercise&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String name&lt;span style="color:#f92672">,&lt;/span> T value&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> value&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> Exercise&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">of&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String name&lt;span style="color:#f92672">,&lt;/span> T value&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Exercise&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;(&lt;/span>name&lt;span style="color:#f92672">,&lt;/span> value&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> T &lt;span style="color:#a6e22e">getValue&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">toString&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Exercise(name=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;, value=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getValue&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;)&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">canEqual&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object other&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> other &lt;span style="color:#66d9ef">instanceof&lt;/span> Exercise&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>o &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(!(&lt;/span>o &lt;span style="color:#66d9ef">instanceof&lt;/span> Exercise&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
Exercise&lt;span style="color:#f92672">&amp;lt;?&amp;gt;&lt;/span> other &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Exercise&lt;span style="color:#f92672">&amp;lt;?&amp;gt;)&lt;/span> o&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(!&lt;/span>other&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">canEqual&lt;/span>&lt;span style="color:#f92672">((&lt;/span>Object&lt;span style="color:#f92672">)&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> other&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getValue&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>other&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()))&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getValue&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> other&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getValue&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getValue&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>other&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getValue&lt;/span>&lt;span style="color:#f92672">()))&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">hashCode&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> PRIME &lt;span style="color:#f92672">=&lt;/span> 59&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> 1&lt;span style="color:#f92672">;&lt;/span>
result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>result&lt;span style="color:#f92672">*&lt;/span>PRIME&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> 43 &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">hashCode&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>result&lt;span style="color:#f92672">*&lt;/span>PRIME&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getValue&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">?&lt;/span> 43 &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getValue&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">hashCode&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> result&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Turns into this friendly snippet (13 lines):&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@Data&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DataExample&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@Setter&lt;/span>&lt;span style="color:#f92672">(&lt;/span>AccessLevel&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">PACKAGE&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> age&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> score&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> String&lt;span style="color:#f92672">[]&lt;/span> tags&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@ToString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>includeFieldNames&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#a6e22e">@Data&lt;/span>&lt;span style="color:#f92672">(&lt;/span>staticConstructor&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;of&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Exercise&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> T value&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>&lt;a href="https://projectlombok.org/">Project Lombok&lt;/a> is my best find this year. But wait, there&amp;rsquo;s more!&lt;/p>
&lt;p>The &lt;a href="https://projectlombok.org/features/all">documentation&lt;/a> is fantastic and has further features to sink your teeth into.&lt;/p></description></item><item><title>Have a lot of if/else Statements Doing Similar Things? Use an Abstract Factory!</title><link>https://jacobhell.github.io/post/using-abstract-factory-pattern/</link><pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate><guid>https://jacobhell.github.io/post/using-abstract-factory-pattern/</guid><description>&lt;p>When working on a legacy system, one of the more common problems I see is similar actions happening within if/else or control statements.&lt;/p>
&lt;p>Take this code snippet for example:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> LedgerEntry &lt;span style="color:#a6e22e">getLedgerEntry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>TransactionDetails details&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
LedgerEntry entry &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
String transactionType &lt;span style="color:#f92672">=&lt;/span> details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTransactionType&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>transactionType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;check&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
entry &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CheckEntry&lt;span style="color:#f92672">();&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCheckType&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;check&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCheckPurchaser&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getPurchaser&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCheckDate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getDate&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setRoutingNumber&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getRoutingNumber&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setAccountNumber&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getAccountNumber&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>transactionType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;creditcard&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
entry &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CreditCardLedgerEntry&lt;span style="color:#f92672">();&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setType&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;creditcard&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCreditCardPurchaser&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getPurchaser&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCreditCardDate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getDate&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCreditCardNumber&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getCreditCardNumber&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>transactionType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cash&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
entry &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CashEntry&lt;span style="color:#f92672">();&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setType&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cash&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCashPurchaser&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getPurchaser&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCashDate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getDate&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>transactionType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;crypto&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
entry &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CryptoEntry&lt;span style="color:#f92672">();&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setType&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;crypto&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCryptoPurchaser&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getPurchaser&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCryptoDate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getDate&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCyrptoPublicKey&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getPublicKey&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> entry&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s say that this snippet is from a larger accounting program that will save financial records to a database.&lt;/p>
&lt;p>This method is doing the following:&lt;/p>
&lt;ol>
&lt;li>Determining what type of transaction occurred based on the transaction type&lt;/li>
&lt;li>Creating a concrete instance of the &lt;code>LedgerEntry&lt;/code> abstract class&lt;/li>
&lt;li>Returning this entry&lt;/li>
&lt;/ol>
&lt;p>This method probably works fine, but what if we needed to do something for both cash and cryptocurrency transactions:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> LedgerEntry &lt;span style="color:#a6e22e">getLedgerEntry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>TransactionDetails details&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// previous code
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>transactionType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cash&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">||&lt;/span> transactionType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;crypto&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setAlertFBIAndPresidentOfUSA&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> entry&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>And what if further we needed to do something special to other transaction types? This could get complicated fast.&lt;/p>
&lt;p>My go to solution for problems such as this to use the &lt;strong>Abstract Factory Pattern&lt;/strong>. This is one of the patterns found in the famous book: &lt;a href="https://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional-ebook/dp/B000SEIBB8">Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a>.&lt;/p>
&lt;p>The Abstract Factory Pattern relies on the client creating a &lt;strong>Factory&lt;/strong> and then calling the abstract method &lt;strong>create&lt;/strong>.&lt;/p>
&lt;p>The nice thing about this is the client doesn&amp;rsquo;t have to know about the inner workings of each create method.&lt;/p>
&lt;p>Let&amp;rsquo;s see what this method looks like after using the Abstract Factory Pattern:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> LedgerEntry &lt;span style="color:#a6e22e">getLedgerEntry&lt;/span>&lt;span style="color:#f92672">(&lt;/span>TransactionDetails details&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
AbstractLedgerFactory ledgerFactory &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
String transactionType &lt;span style="color:#f92672">=&lt;/span> details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getTransactionType&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>transactionType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;check&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
ledgerFactory &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CheckLedgerFactory&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>transactionType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;creditcard&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
ledgerFactory &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CreditCardLedgerFactory&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>transactionType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;cash&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
ledgerFactory &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CashLedgerFactory&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>transactionType&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;crypto&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
ledgerFactory &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CryptoLedgerFactory&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> ledgerFactory&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Much easier to read! And if more logic needs to happen for transaction types, it can be done in the concrete factory method.&lt;/p>
&lt;p>Here is the &lt;code>AbstractLedgerFactory&lt;/code> and &lt;code>CryptoLedgerFactory&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AbstractLedgerFactory&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">abstract&lt;/span> LedgerEntry &lt;span style="color:#a6e22e">create&lt;/span>&lt;span style="color:#f92672">(&lt;/span>TransactionDetails details&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CryptoLedgerFactory&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> AbstractLedgerFactory
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> LedgerEntry &lt;span style="color:#a6e22e">create&lt;/span>&lt;span style="color:#f92672">(&lt;/span>TransactionDetails details&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
LedgerEntry entry &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CryptoEntry&lt;span style="color:#f92672">();&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setType&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;crypto&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCryptoPurchaser&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getPurchaser&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCryptoDate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getDate&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setCyrptoPublicKey&lt;/span>&lt;span style="color:#f92672">(&lt;/span>details&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getPublicKey&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setAlertFBIAndPresidentOfUSA&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> entry&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>