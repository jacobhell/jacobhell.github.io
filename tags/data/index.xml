<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>data on Jacob Hell's Blog</title><link>https://jacobhell.com/tags/data/</link><description>Recent content in data on Jacob Hell's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 05 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jacobhell.com/tags/data/index.xml" rel="self" type="application/rss+xml"/><item><title>What Are Reliability, Scalability, and Maintainability in Distributed Systems?</title><link>https://jacobhell.com/post/reliability-scalability-maintainability/</link><pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate><guid>https://jacobhell.com/post/reliability-scalability-maintainability/</guid><description>&lt;h2 id="reliability">Reliability&lt;/h2>
&lt;p>Roughly, reliability means &amp;ldquo;working correctly&amp;rdquo; even if something goes wrong. This thing going wrong can be hardware faults, software faults, or human error. A synonym for reliability is fault-tolerant. It is impossible for a system to be completely fault tolerant. One tool you can use to test your system&amp;rsquo;s tolerance is Netflix&amp;rsquo;s &lt;a href="https://netflix.github.io/chaosmonkey/">Chaos Monkey&lt;/a>.&lt;/p>
&lt;h3 id="hardware-faults">Hardware Faults&lt;/h3>
&lt;p>As we move into a cloud based style of software development, single machine failure is getting less common. However, cloud services sometimes randomly go out. One day, I was unable to use Azure due to the &lt;a href="https://siliconangle.com/2018/09/04/severe-weather-impacts-microsofts-azure-cloud-services-texas/">outage in Texas&lt;/a>.&lt;/p>
&lt;h3 id="software-faults">Software Faults&lt;/h3>
&lt;p>Due to bugs, software issues can bring down entire systems. These issues can&amp;rsquo;t be stopped completely, but can be mitigated with unit testing, integration testing, and monitoring system behavior in production.&lt;/p>
&lt;h3 id="human-error">Human Error&lt;/h3>
&lt;p>Configuration error by humans is the leading causes of faults in systems. To mitigate this:&lt;/p>
&lt;ul>
&lt;li>Design systems to minimize opportunity for error.&lt;/li>
&lt;li>Provide separate instances of the system away from production for testing and exploring.&lt;/li>
&lt;li>Test using automated processes.&lt;/li>
&lt;li>Allow for quick and easy recovery from human errors.&lt;/li>
&lt;li>Setup monitoring for metrics and errors.&lt;/li>
&lt;/ul>
&lt;h2 id="scalability">Scalability&lt;/h2>
&lt;p>Scalability is how well a system can respond to load. Load is described with load feature terms. For example, Twitter must handle tweets at a rate of 12000 tweets per second.&lt;/p>
&lt;p>In online systems, we usually care about the response time. Given 12000 tweets per second, how fast can a system respond to a user? If you store data on this, it is best to take the median of the response time.&lt;/p>
&lt;p>To respond to increased load, you can either scale-up or scale-out. Scaling up means improving system performance by buying better equipment. Scaling out means to distribute the load horizontally.&lt;/p>
&lt;p>There is no optimal best scaling design. It is dependent on the system.&lt;/p>
&lt;h2 id="maintainability">Maintainability&lt;/h2>
&lt;p>Refers to ongoing maintenance of a system. There&amp;rsquo;s three design principles of software systems:&lt;/p>
&lt;ul>
&lt;li>Operability: Make it easy for teams to keep software running smoothly
&lt;ul>
&lt;li>Provide good monitoring of system internals&lt;/li>
&lt;li>Provide good support for automation and integration of standard tools&lt;/li>
&lt;li>Avoid dependency on individual machines&lt;/li>
&lt;li>Provide good documentation&lt;/li>
&lt;li>Provide good default behavior, but allow for privileged users to override&lt;/li>
&lt;li>Allow for self healing&lt;/li>
&lt;li>Minimize surprises&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Simplicity: Make it easy for new engineers to understand the system
&lt;ul>
&lt;li>Provide good abstraction&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Evolvability: Make it easy for new features to be added in future.
&lt;ul>
&lt;li>TDD and Agile&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>